---
import { Icon } from "astro-icon/components";
import { navBarConfig, siteConfig } from "../config";
import { LinkPresets } from "../constants/link-presets";
import { LinkPreset, type NavBarLink } from "../types/config";
import { url } from "../utils/url-utils";
import LightDarkSwitch from "./LightDarkSwitch.svelte";
import MobileTOC from "./MobileTOC.svelte";
import Search from "./Search.svelte";
import DisplaySettings from "./widget/DisplaySettings.svelte";
import DropdownMenu from "./widget/DropdownMenu.astro";
import NavMenuPanel from "./widget/NavMenuPanel.astro";
import TranslateButton from "./widget/TranslateButton.svelte";

const className = Astro.props.class;

// 获取导航栏透明模式配置
const navbarTransparentMode =
	siteConfig.banner?.navbar?.transparentMode || "semi";

// 检查是否为首页
const isHomePage = Astro.url.pathname === "/" || Astro.url.pathname === "";

let links: NavBarLink[] = navBarConfig.links.map(
	(item: NavBarLink | LinkPreset): NavBarLink => {
		if (typeof item === "number") {
			return LinkPresets[item];
		}
		return item;
	},
);
---
<div id="navbar" class="z-50 onload-animation" data-transparent-mode={navbarTransparentMode} data-is-home={isHomePage}>
    <div class="absolute h-8 left-0 right-0 -top-8 bg-[var(--card-bg)] transition"></div> <!-- used for onload animation -->
    <div class:list={[
        className,
        "!overflow-visible max-w-[var(--page-width)] h-[4.5rem] mx-auto flex items-center justify-between px-4"]}>
        <a href={url('/')} class="btn-plain scale-animation rounded-lg h-[3.25rem] px-5 font-bold active:scale-95">
            <div class="flex flex-row text-[var(--primary)] items-center text-md">
                <svg class="w-[1.75rem] h-[1.75rem] mb-1 mr-2 fill-current stroke-current" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false">
                    <path d="M168.448 104.575a2.148 4.446 0 0 1-2.148 4.445 2.148 4.446 0 0 1-2.149-4.445 2.148 4.446 0 0 1 2.149-4.446 2.148 4.446 0 0 1 2.148 4.446" transform="matrix(1.05575 .27872 -.28152 1.04527 -117.998 -144.535)" fill="currentColor" stroke="currentColor" stroke-width="2.30885" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M15.11 185.034a2.914 5.027 0 0 1-2.915 5.027 2.914 5.027 0 0 1-2.914-5.027 2.914 5.027 0 0 1 2.914-5.027 2.914 5.027 0 0 1 2.914 5.027" transform="matrix(.89428 -.62156 .6278 .8854 -117.998 -144.535)" fill="currentColor" stroke="currentColor" stroke-width="2.63252" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M115.153 151.38a2.914 5.027 0 0 1-2.914 5.027 2.914 5.027 0 0 1-2.914-5.027 2.914 5.027 0 0 1 2.914-5.028 2.914 5.027 0 0 1 2.914 5.027" transform="matrix(1.08836 -.09559 .09655 1.07756 -117.998 -144.535)" fill="currentColor" stroke="currentColor" stroke-width="2.63252" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M6.82 189.986a2.507 4.325 0 0 1-2.507 4.325 2.507 4.325 0 0 1-2.507-4.325 2.507 4.325 0 0 1 2.507-4.325 2.507 4.325 0 0 1 2.507 4.325" transform="matrix(.89428 -.62156 .6278 .8854 -117.998 -144.535)" fill="currentColor" stroke="currentColor" stroke-width="2.26484" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M636.43 289.918c-3.042-.765-5.726-2.858-7.21-5.622-.968-1.805-1.432-3.86-1.476-5.908-.043-2.048.325-4.092.943-6.045a24 24 0 0 1 3.53-6.952l4.284-3.294c3.793-2.4 8.654-3.036 12.938-1.695s7.913 4.636 9.661 8.77c1.03 2.438 1.416 5.23.596 7.746-.41 1.258-1.118 2.426-2.09 3.323s-2.21 1.516-3.522 1.692a6.03 6.03 0 0 1-3.548-.617l-6.498 3.11a10.46 10.46 0 0 1-3.033 3.565 10.46 10.46 0 0 1-4.575 1.927" transform="matrix(.42448 .03626 -.03662 .42027 -243.567 -114.836)" fill="currentColor" stroke="currentColor" stroke-width="8" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="none" stroke-opacity="1"/>
                </svg>
                {siteConfig.title}
            </div>
        </a>
        <div class="hidden md:flex items-center space-x-1">
            {links.map((l) => {
                return <DropdownMenu link={l} />;
            })}
        </div>
        <div class="flex">
            <!--<SearchPanel client:load>-->
            <Search client:only="svelte"></Search>
            <MobileTOC client:only="svelte"></MobileTOC>
            <TranslateButton client:only="svelte"></TranslateButton>
            {!siteConfig.themeColor.fixed && (
                    <button aria-label="Display Settings" class="btn-plain scale-animation rounded-lg h-11 w-11 active:scale-90" id="display-settings-switch">
                        <Icon name="material-symbols:palette-outline" class="text-[1.25rem]"></Icon>
                    </button>
            )}
            <LightDarkSwitch client:only="svelte"></LightDarkSwitch>
            <button aria-label="Menu" name="Nav Menu" class="btn-plain scale-animation rounded-lg w-11 h-11 active:scale-90 md:!hidden" id="nav-menu-switch">
                <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]"></Icon>
            </button>
        </div>
        <NavMenuPanel links={links}></NavMenuPanel>
        <DisplaySettings client:only="svelte"></DisplaySettings>
    </div>
</div>

<script>
function switchTheme() {
    if (localStorage.theme === 'dark') {
        document.documentElement.classList.remove('dark');
        localStorage.theme = 'light';
    } else {
        document.documentElement.classList.add('dark');
        localStorage.theme = 'dark';
    }
}

function loadButtonScript() {
    let switchBtn = document.getElementById("scheme-switch");
    if (switchBtn) {
        switchBtn.onclick = function () {
            switchTheme()
        };
    }

    let settingBtn = document.getElementById("display-settings-switch");
    if (settingBtn) {
        settingBtn.onclick = function () {
            let settingPanel = document.getElementById("display-setting");
            if (settingPanel) {
                settingPanel.classList.toggle("float-panel-closed");
            }
        };
    }

    let menuBtn = document.getElementById("nav-menu-switch");
    if (menuBtn) {
        menuBtn.onclick = function () {
            let menuPanel = document.getElementById("nav-menu-panel");
            if (menuPanel) {
                menuPanel.classList.toggle("float-panel-closed");
            }
        };
    }
}

loadButtonScript();

// 为semifull模式添加滚动检测逻辑
function initSemifullScrollDetection() {
    const navbar = document.getElementById('navbar');
    if (!navbar) return;
    
    const transparentMode = navbar.getAttribute('data-transparent-mode');
    if (transparentMode !== 'semifull') return;
    
    const isHomePage = navbar.getAttribute('data-is-home') === 'true';
    
    // 如果不是首页，移除滚动事件监听器并设置为半透明状态
    if (!isHomePage) {
        // 移除之前的滚动事件监听器（如果存在）
        if (window.semifullScrollHandler) {
            window.removeEventListener('scroll', window.semifullScrollHandler);
            window.semifullScrollHandler = null;
        }
        // 设置为半透明状态
        navbar.classList.add('scrolled');
        return;
    }
    
    // 移除现有的scrolled类，重置状态
    navbar.classList.remove('scrolled');
    
    let ticking = false;
    
    function updateNavbarState() {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const threshold = 50; // 滚动阈值，可以根据需要调整
        
        if (scrollTop > threshold) {
            navbar.classList.add('scrolled');
        } else {
            navbar.classList.remove('scrolled');
        }
        
        ticking = false;
    }
    
    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(updateNavbarState);
            ticking = true;
        }
    }
    
    // 移除之前的滚动事件监听器（如果存在）
    if (window.semifullScrollHandler) {
        window.removeEventListener('scroll', window.semifullScrollHandler);
    }
    
    // 保存新的事件处理器引用
    window.semifullScrollHandler = requestTick;
    
    // 监听滚动事件
    window.addEventListener('scroll', requestTick, { passive: true });
    
    // 初始化状态
    updateNavbarState();
}

// 将函数暴露到全局对象，供页面切换时调用
window.initSemifullScrollDetection = initSemifullScrollDetection;

// 页面加载完成后初始化滚动检测
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSemifullScrollDetection);
} else {
    initSemifullScrollDetection();
}

// Inline external SVGs so they can inherit currentColor and be updated dynamically
async function inlineExternalSvgs() {
    const imgs = Array.from(document.querySelectorAll('img[data-inline-src]'));
    await Promise.all(imgs.map(async (img) => {
        const src = img.getAttribute('data-inline-src');
        if (!src) return;
        try {
            const res = await fetch(src, { cache: 'no-cache' });
            if (!res.ok) return;
            const text = await res.text();
            const parser = new DOMParser();
            const doc = parser.parseFromString(text, 'image/svg+xml');
            const svg = doc.querySelector('svg');
            if (!svg) return;

            // Transfer useful attributes from img to svg
            const className = img.getAttribute('class') || '';
            svg.setAttribute('class', className + ' inline-svg');
            svg.setAttribute('role', 'img');

            // Remove fixed width/height so tailwind classes work, but keep viewBox
            svg.removeAttribute('width');
            svg.removeAttribute('height');

            // Ensure svg inherits color via currentColor: set style.color from parent
            const parentColor = window.getComputedStyle(img.parentElement).color;
            svg.style.color = parentColor;

            img.replaceWith(svg);
        } catch (e) {
            console.error('Failed to inline SVG', src, e);
        }
    }));
}

function updateInlinedSvgColors() {
    document.querySelectorAll('svg.inline-svg').forEach((svg) => {
        const parent = svg.parentElement || svg;
        svg.style.color = window.getComputedStyle(parent).color;
    });
}

// Observe theme changes (dark class toggles on documentElement) and update colors
const themeObserver = new MutationObserver((mutations) => {
    for (const m of mutations) {
        if (m.attributeName === 'class') {
            updateInlinedSvgColors();
            break;
        }
    }
});
themeObserver.observe(document.documentElement, { attributes: true });

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        inlineExternalSvgs().then(() => updateInlinedSvgColors());
    });
} else {
    inlineExternalSvgs().then(() => updateInlinedSvgColors());
}
</script>

{import.meta.env.PROD && <script is:inline define:vars={{scriptUrl: url('/pagefind/pagefind.js')}}>
async function loadPagefind() {
    try {
        const response = await fetch(scriptUrl, { method: 'HEAD' });
        if (!response.ok) {
            throw new Error(`Pagefind script not found: ${response.status}`);
        }

        const pagefind = await import(scriptUrl);

        await pagefind.options({
            excerptLength: 20
        });

        window.pagefind = pagefind;

        document.dispatchEvent(new CustomEvent('pagefindready'));
        console.log('Pagefind loaded and initialized successfully, event dispatched.');
    } catch (error) {
        console.error('Failed to load Pagefind:', error);
        window.pagefind = {
            search: () => Promise.resolve({ results: [] }),
            options: () => Promise.resolve(),
        };
        document.dispatchEvent(new CustomEvent('pagefindloaderror'));
        console.log('Pagefind load error, event dispatched.');
    }
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadPagefind);
} else {
    loadPagefind();
}
</script>}
